/**
 * Recognition wall JavaScript.
 *
 * @module     local_recognition/main
 * @copyright  2024 Your Name
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */ define(["jquery", "core/notification"], function (t, e) {
  return {
    init: function () {
      function n(n, o, i, a) {
        t(document).on("click", n, function (n) {
          n.preventDefault();
          let s = t(this),
            r = s.data("record-id");
          t.ajax({
            url: M.cfg.wwwroot + "/local/recognition/ajax.php",
            type: "POST",
            data: {
              action: o,
              postid: r,
              content: "",
              commentid: 0,
              sesskey: M.cfg.sesskey,
            },
            dataType: "json",
            success: function (t) {
              var n;
              t.success
                ? (s.find(`.${i}-count`).text(t.data[i]),
                  s.toggleClass(
                    a,
                    t.data[
                      "is" + ((n = i), n.charAt(0).toUpperCase() + n.slice(1))
                    ]
                  ))
                : e.addNotification({
                    message: t.message || `Error performing ${o}`,
                    type: "error",
                  });
            },
            error: function (t, n, o) {
              e.addNotification({
                message: "Error connecting to server: " + o,
                type: "error",
              });
            },
          });
        });
      }
      function o(n, o, i) {
        t.ajax({
          url: M.cfg.wwwroot + "/local/recognition/ajax.php",
          type: "POST",
          data: {
            action: "getcomments",
            postid: n,
            content: "",
            commentid: 0,
            sesskey: M.cfg.sesskey,
          },
          dataType: "json",
          success: function (t) {
            t.success
              ? (o.find(".comments-list").html(t.data.html),
                i.find(".comments-count").text(t.data.count))
              : e.addNotification({
                  message: t.message || "Error loading comments",
                  type: "error",
                });
          },
          error: function (t, n, o) {
            e.addNotification({
              message: "Error connecting to server: " + o,
              type: "error",
            });
          },
        });
      }
      t(document).on("input", ".mention-textarea", function () {
        let e = t(this),
          n = e.prop("selectionStart"),
          o = e.val(),
          i = o.lastIndexOf("@", n - 1);
        if (i >= 0 && (0 === i || /\s/.test(o.charAt(i - 1)))) {
          let a = o.substring(i + 1, n);
          a.length >= 1
            ? t.ajax({
                url: M.cfg.wwwroot + "/local/recognition/ajax.php",
                method: "GET",
                data: {
                  action: "searchusers",
                  query: a,
                  sesskey: M.cfg.sesskey,
                },
                dataType: "json",
                success: function (n) {
                  if (n.success) {
                    let o = t("#mention-dropdown");
                    0 === o.length &&
                      (o = t(
                        '<ul id="mention-dropdown" class="mention-dropdown"></ul>'
                      ).appendTo("body")),
                      o.empty(),
                      (n.data || []).forEach(function (e) {
                        let n = t('<li class="mention-item"></li>')
                          .text(e.fullname)
                          .attr("data-uid", e.id);
                        o.append(n);
                      });
                    let i = e.offset();
                    o.css({
                      top: i.top + e.outerHeight(),
                      left: i.left,
                      width: e.outerWidth(),
                      position: "absolute",
                      zIndex: 9999,
                      display: "block",
                    });
                  } else t("#mention-dropdown").hide();
                },
                error: function () {
                  t("#mention-dropdown").hide();
                },
              })
            : t("#mention-dropdown").hide();
        } else t("#mention-dropdown").hide();
      }),
        t(document).on("mousedown", ".mention-item", function (e) {
          e.preventDefault();
          let n = t(this),
            o = t(".mention-textarea:focus");
          if (0 === o.length) return;
          let i = o.prop("selectionStart"),
            a = o.val(),
            s = a.lastIndexOf("@", i - 1),
            r = a.substring(0, s),
            c = a.substring(i),
            d = "@" + n.text() + " ";
          o.val(r + d + c),
            o.focus(),
            o[0].setSelectionRange((r + d).length, (r + d).length),
            t("#mention-dropdown").hide();
        }),
        t(document).on("blur", ".mention-textarea", function () {
          setTimeout(function () {
            t("#mention-dropdown").hide();
          }, 200);
        }),
        t(".file-input").on("change", function (n) {
          let o = n.target.files[0];
          if (!o) return;
          let i = t(this).data("max-size");
          if (o.size > i) {
            e.addNotification({
              message: "File size must be less than 5MB",
              type: "error",
            }),
              t(this).val("");
            return;
          }
          let a = new FileReader();
          (a.onload = function (e) {
            let n = t(".post-attachments");
            n.html(
              `
  <div class="attachment-preview">
    <img src="${e.target.result}" alt="Preview">
    <div class="attachment-remove">&times;</div>
  </div>`
            ).show();
          }),
            a.readAsDataURL(o);
        }),
        t(document).on("click", ".attachment-remove", function () {
          t(".file-input").val(""), t(".post-attachments").empty().hide();
        }),
        n(".recognition-like-btn", "like", "likes", "liked"),
        n(".recognition-thanks-btn", "thanks", "thanks", "thanked"),
        n(
          ".recognition-celebration-btn",
          "celebration",
          "celebration",
          "celebrated"
        ),
        t(document).on("click", ".recognition-comments-btn", function (e) {
          e.preventDefault();
          let n = t(this),
            i = n.data("record-id"),
            a = t("#comments-" + i);
          a.slideToggle(),
            0 === a.find(".comments-list").length &&
              (a.prepend('<div class="comments-list"></div>'), o(i, a, n));
        }),
        t(document).on("submit", ".recognition-comment-form", function (n) {
          n.preventDefault();
          let i = t(this),
            a = i.data("record-id"),
            s = i.find(".comment-input"),
            r = s.html().trim();
          i.find(".comment-hidden-content").val(r);
          let c = i.closest(".recognition-post"),
            d = c.find(".recognition-comments-btn"),
            l = i.closest(".recognition-comments");
          r &&
            t.ajax({
              url: M.cfg.wwwroot + "/local/recognition/ajax.php",
              type: "POST",
              data: {
                action: "addcomment",
                postid: a,
                content: r,
                commentid: 0,
                sesskey: M.cfg.sesskey,
              },
              dataType: "json",
              success: function (t) {
                t.success
                  ? (s.html(""), o(a, l, d))
                  : e.addNotification({
                      message: t.message || "Error adding comment",
                      type: "error",
                    });
              },
              error: function (t, n, o) {
                e.addNotification({
                  message: "Error connecting to server: " + o,
                  type: "error",
                });
              },
            });
        }),
        t(document).on(
          "click",
          "#recognition-pagination .page-item:not(.active) .page-link",
          function (n) {
            n.preventDefault();
            let o = t(this).attr("href");
            if (!o) return;
            let i = o.match(/[?&]page=(\d+)/),
              a = i ? parseInt(i[1]) : 0;
            (function n(o) {
              t(".loading-indicator").show();
              let i = window.location.href.split("?")[0];
              window.history.pushState(
                { page: o },
                "",
                i + (o > 0 ? "?page=" + o : "")
              ),
                t.ajax({
                  url: i,
                  data: { page: o, ajax: 1 },
                  method: "GET",
                  success: function (e) {
                    let n = t(e).find(".recognition-posts-container").html();
                    t(".recognition-posts-container").html(n),
                      t("#recognition-pagination .page-item").removeClass(
                        "active"
                      );
                    let a = parseInt(
                      t("#recognition-pagination").data("total-pages") || 0
                    );
                    a > 0 &&
                      t(
                        "#recognition-pagination .page-item.last .page-link"
                      ).attr("href", i + "?page=" + (a - 1)),
                      t("#recognition-pagination .page-item .page-link").each(
                        function () {
                          let e = t(this).attr("href");
                          if (e) {
                            let n = e.match(/[?&]page=(\d+)/),
                              i = n ? parseInt(n[1]) : 0;
                            i === o &&
                              t(this).parent(".page-item").addClass("active");
                          } else
                            0 === o &&
                              "1" === t(this).text().trim() &&
                              t(this).parent(".page-item").addClass("active");
                        }
                      ),
                      t(".loading-indicator").hide(),
                      t("html, body").animate(
                        {
                          scrollTop:
                            t(".recognition-posts-container").offset().top -
                            100,
                        },
                        500
                      );
                  },
                  error: function (n, o, i) {
                    e.addNotification({
                      message: "Error loading posts: " + i,
                      type: "error",
                    }),
                      t(".loading-indicator").hide();
                  },
                });
            })(a);
          }
        );
    },
  };
});
